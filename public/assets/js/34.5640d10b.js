(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{759:function(t,s,a){"use strict";a.r(s);var e=a(105),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sleep-与-wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleep-与-wait"}},[t._v("#")]),t._v(" sleep() 与 wait()")]),t._v(" "),a("h2",{attrs:{id:"slepp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#slepp"}},[t._v("#")]),t._v(" slepp()")]),t._v(" "),a("p",[t._v("sleep() 方法是 Thread 类中的一个静态的，native 修饰的方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" millis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("Thread.sleep()")]),t._v(" 方法在任何情况下都可以调用的，调用 "),a("code",[t._v("sleep(long millis)")]),t._v(" 方法后，当前线程会进入休眠状态（参数 millis 休眠时长，单位：毫秒），在线程暂停期间，当前暂停线程会让出 CPU 资源给其他线程，但不会失去任何监视器的所有权，并且不会释放任何锁资源。")]),t._v(" "),a("h2",{attrs:{id:"wait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wait"}},[t._v("#")]),t._v(" wait()")]),t._v(" "),a("p",[t._v("wait() 方法是 Object 中定义的 native 修饰的方法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("native")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("wait() 只能在 synchronized block 中调用；当某个线程调用了对象的 wait() 方法后，那么该线程会放弃当前对象锁，进入等待此对象的等待池，当有其他线程调用了 "),a("code",[t._v("notifyAll()")]),t._v(" 方法（唤醒所有 wait 线程）或 "),a("code",[t._v("notify()")]),t._v("方法（随机唤醒一个 wait 线程），被唤醒的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁，优先级高的线程竞争到对象锁的概率大；没有获取到对象锁的线程，还会继续留在锁池中，直到有线程再次调用 wait() 方法，它才会重新回到等待池中。而获取对象锁的线程则会继续往下执行，直到执行完 synchronized block，它才会释放掉该对象锁，此时锁池中的线程会继续竞争该对象锁。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("strong",[t._v("锁池")]),t._v("：假设线程 A 已经拥有了某个对象的锁，而其它的线程想要调用这个对象的某个 synchronized 方法（或者 synchronized block），由于这些线程在进入对象的 synchronized 方法之前必须先获得该对象的锁的拥有权，但此时的对象锁被线程 A 拥有，所以这些线程就会进入了该对象的锁池中。")]),t._v(" "),a("p",[a("strong",[t._v("等待池")]),t._v("：假设一个线程 A 调用了某个对象的 wait() 方法，线程 A 就会释放该对象的锁，同时线程 A 就进入到了对象锁的等待池中。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);