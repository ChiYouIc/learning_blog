(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{651:function(v,_,t){"use strict";t.r(_);var i=t(4),l=Object(i.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"领域驱动设计"}},[v._v("领域驱动设计")]),v._v(" "),t("p",[t("code",[v._v("DDD（Domain-Driven Design）领域驱动设计")]),v._v("，它是面"),t("code",[v._v("向对象的分析和设计（OOAD, Object Orient Analysis Design）")]),v._v("的一个补充，对技术框架进行了分层规划，同时对每个类进行了策略和类型划分。\n领域模型是领域驱动的核心，采用 DDD 的设计思想，业务逻辑不再集中在几个大型的类上，而是在大量相对小的领域对象上，这些类具有自己的状态和行为，每个类都是完整的独立的，\n并与现实领域的业务对象形成一种映射。基于 DDD 的架构设计，保证了系统的可维护性，扩展性和敏捷性，在处理复杂业务逻辑方面有明显的优势。")]),v._v(" "),t("h2",{attrs:{id:"ddd-的编程世界观"}},[v._v("DDD 的编程世界观")]),v._v(" "),t("p",[v._v("过去需求分析和系统设计都是分离的，正如我们国家的“系统分析师”和“系统架构师”两种职称考试一样，这样割裂的结果导致，需求分析的结果无法直接进行设计编程，而能够进行编程运行的代码\n却"),t("code",[v._v("扭曲需求")]),v._v("，导致客户运行软件后才发现"),t("code",[v._v("很多功能不是自己想要的")]),v._v("，而且软件"),t("code",[v._v("不能快速跟随需求变化")]),v._v("。")]),v._v(" "),t("p",[v._v("DDD 则打破了这种隔阂，提出了"),t("code",[v._v("领域模型概念")]),v._v("，统一了分析和设计编程，使得软件能够更灵活快速的跟随需求变化。")]),v._v(" "),t("p",[v._v("DDD 的革命性在于：领域模型准确反映了业务语言，而传统的分层架构只关心数据，这些数据对象除了简单读、写操作外，没有任何业务方法，被必须成"),t("code",[v._v("失血模型")]),v._v("，那么领域模型这种\n"),t("code",[v._v("带有业务方法的充血模型")]),v._v("到底好在什么地方呢？")]),v._v(" "),t("p",[v._v("看到领域模型代码，就像看到业务需求，没有翻译没有转换，保证软件真正实现“拷贝不走样”。")]),v._v(" "),t("p",[v._v("DDD 最大的好处是："),t("code",[v._v("接触到需求第一步就是考虑领域模型")]),v._v("，而不是将其切割成数据和行为，然后数据用数据库实现，行为使用服务实现，最后造成需求的首肢分离。DDD 让你首先考虑的是"),t("code",[v._v("业务语言")]),v._v("，\n而不是数据。重点不同导致编程数据观不同。")]),v._v(" "),t("h2",{attrs:{id:"ddd-的特点"}},[v._v("DDD 的特点")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("分层架构")]),v._v(" "),t("ol",[t("li",[v._v("成熟、清晰的分层架构")]),v._v(" "),t("li",[v._v("领域对象与世界的业务映射")]),v._v(" "),t("li",[v._v("明确的职责划分")])])]),v._v(" "),t("li",[t("p",[v._v("复用性")]),v._v(" "),t("ol",[t("li",[v._v("领域对象是核心")]),v._v(" "),t("li",[v._v("领域对象复用：完整的业务对象描述")]),v._v(" "),t("li",[v._v("设计利用：设计基于领域对象而非基于数据库的")])])]),v._v(" "),t("li",[t("p",[v._v("适用场合")]),v._v(" "),t("ol",[t("li",[v._v("具备复杂业务逻辑的软件开发")]),v._v(" "),t("li",[v._v("对设计和开发人员要求较高")]),v._v(" "),t("li",[v._v("不适合普通的 CURD 操作")]),v._v(" "),t("li",[v._v("系统的维护性与扩展性较高")])])])]),v._v(" "),t("h2",{attrs:{id:"对于-ddd-系统架构的分层"}},[v._v("对于 DDD 系统架构的分层")]),v._v(" "),t("p",[v._v("不使用 DDD 思想进行系统设计时，一般会分为 3 层，如数据层、业务层和表现层，而使用 DDD 之后，分层的方式发生了一些改变，先来看一下：")]),v._v(" "),t("ol",[t("li",[v._v("表现层：也叫 WEB 层、UI 层，一般体现出来的时页面的布局，可以用 web mvc，web form，win form 等去实现；")]),v._v(" "),t("li",[v._v("应用层：用来协调应用活动，它不包括业务逻辑，他不保留业务对象的状态，但它保存应用任务的进度状态；")]),v._v(" "),t("li",[v._v("领域层：包含领域信息，这是业务软件的核心，他保留业务对象的状态，对业务对象和它们状态的持久化工作委托给基础设施层；")]),v._v(" "),t("li",[v._v("基础设施层：是其他层的基础，实现对业务对象的持久化")])]),v._v(" "),t("h2",{attrs:{id:"ddd-中的几个核心对象"}},[v._v("DDD 中的几个核心对象")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("Entities：这不是简单的 POJO 实体，而是具备了业务逻辑的实体；")])]),v._v(" "),t("li",[t("p",[v._v("Factories：工厂类，用来生产对象；")])]),v._v(" "),t("li",[t("p",[v._v("Repositories：持久化，它本身就是 DAO（Data Access Objects）数据访问对象；")])]),v._v(" "),t("li",[t("p",[v._v("Services：服务层，为上层提供了操作的接口，负责对象领域对象进行调试和封装，同时提供了各种形式的服务。")])])]),v._v(" "),t("blockquote",[t("p",[v._v("摘自：")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/lori/archive/2013/02/05/2892605.html?spm=a2c6h.12873639.0.0.19374d01CWr1wO"}},[v._v("https://www.cnblogs.com/lori/archive/2013/02/05/2892605.html?spm=a2c6h.12873639.0.0.19374d01CWr1wO")])]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.jdon.com/ddd.html"}},[v._v("https://www.jdon.com/ddd.html")])])])])}),[],!1,null,null,null);_.default=l.exports}}]);