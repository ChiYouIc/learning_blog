(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{587:function(a,t,s){"use strict";s.r(t);var n=s(4),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("Hashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是他继承自 Directionary 类，并且是线程安全的，任意时间只有一个线程能够写 Hashtable，但并发性不如 ConcurrentHashMap，因为 ConcurrentHashMap 引入了分段锁。Hashtable 不建议在新代码中继续使用，不需要多线的情况下，建议使用 HashMap，需要多线程的场景，建议使用 ConcurrentHashMap。")]),a._v(" "),s("h2",{attrs:{id:"hashtable-继承体系"}},[a._v("Hashtable 继承体系")]),a._v(" "),s("p",[a._v("Hashtable 也是一种 key - value 结构，它继承自 Dictionary，实现了 Map 和 Cloneable 以及 Serializable 接口。")]),a._v(" "),s("h3",{attrs:{id:"继承图"}},[a._v("继承图")]),a._v(" "),s("img",{attrs:{src:a.$withBase("/img/java/container/Hashtable.png"),alt:"Hashtable"}}),a._v(" "),s("h2",{attrs:{id:"hashtable-操作"}},[a._v("Hashtable 操作")]),a._v(" "),s("p",[a._v("Hashtable 的操作几乎与 HashMap 操作一致，主要区别在于 Hashtable 为了实现多线程安全，在几乎所有的方法上都加上了 synchronized 锁，而加锁的结果就是 Hashtable 操作效率十分低下。")]),a._v(" "),s("h2",{attrs:{id:"hashtable-与-hashmap-对比"}},[a._v("Hashtable 与 HashMap 对比")]),a._v(" "),s("ol",[s("li",[s("p",[s("strong",[a._v("线程安全")]),a._v("：HashMap 是线程不安全的类，多线程下回造成并发冲突，但单线程下运行效率较高；Hashtable 是线程安全的类，很多方法都是使用 synchronized 修饰，也正是因为加锁导致并发效率低下，单线程环境效率也十分低。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("插入 null")]),a._v("：HashMap 允许有一个键为 null，允许多个值为 null；但 Hashtable 不允许键或值为 null。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("容量")]),a._v("：HashMap 底层数组长度必须为 2 的次幂，这样做是为了降低 hash 冲突准备的，默认为 16；而 Hashtable 底层数组长度可以为任意值，这就造成了 hash 算法散射不均匀，hash 冲突率较高。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("Hash 映射")]),a._v("：HashMap 的 hash 算法通过非常规设计，将底层 table 长度设计为 2 的次幂，使用位与运算代替取模运算，减少运算消耗；而 Hashtable 的 hash 算法首先使得 hash 值小于整数最大值。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// HashMap")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("^")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 下标index运算")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// HashTable")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0x7FFFFFFF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("扩容机制")]),a._v("：HashMap 创建一个为原先 2 倍的数组，然后对原数组进行遍历以及 rehash；Hashtable 扩容创建一个原长度为 2 倍的数组，再使用头插法将链表进行反序。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("结果区别")]),a._v("：HashMap 是由数组 + 链表组成，在 JDK 1.8 之后，当链表长度大于 8 时，链表自动转换为红黑树；而 Hashtable 一直都是数组 + 链表。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("继承关系")]),a._v("：Hashtable 继承自 Dictionary 类；而 HashMap 继承自 AbStractMap 类。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("迭代器")]),a._v("：HashMap 是 fail - fast；而 Hashtable 不是。")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);